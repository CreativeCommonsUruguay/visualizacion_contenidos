<?php

use Drupal\taxonomy\Entity\Term;

//Define la URL del custom twig para los campos de las fichas de autor y obras.
function visualizacion_contenidos_theme($existing, $type, $theme, $path) {

  $theme = array();

// Usados en la entidad 'autor'
  $theme['field__field_nombres'] =
  $theme['field__field_apellidos'] =
  $theme['field__field_sexo'] =
  $theme['field__field_ano_de_nacimiento'] =
  $theme['field__field_ano_de_muerte'] =
  $theme['field__field_lugardenacimiento'] =
  $theme['field__field_lugardemuerte'] =
  $theme['field__field_disciplinaautoral'] =
  $theme['field__field_estatusderechos'] =
  $theme['field__field_seudonimos'] =
  $theme['field__field_variantes_de_nombre'] =
    array(
      'render element' => 'content',
      'base hook' => 'field',
      # template file
      'template' => 'field--node--campos_comunes--fichas',
      # location of the template file
     'path' => drupal_get_path('module', 'visualizacion_contenidos') . '/templates',
  );

// Usados en la entidad 'autor'
  $theme['field__field_fuentes'] =
  $theme['field__field_enlaces'] =
  $theme['field__field_notas'] =
    array(
      'render element' => 'content',
      'base hook' => 'field',
      # template file
      'template' => 'field--node--campos_expandibles--autor',
      # location of the template file
     'path' => drupal_get_path('module', 'visualizacion_contenidos') . '/templates',
  );

// Usados en las entidades de obras
  $theme['field__field_paginas'] =
  $theme['field__field_ano_de_publicacion'] =
  $theme['field__field_numero_de_edicion'] =
  $theme['field__field_idioma'] =
  $theme['field__field_formatodearchivo'] =
  $theme['field__field_subtitulo'] =
  $theme['field__field_temas'] =
  $theme['field__field_editorial'] =
  $theme['field__field_coleccion'] =
  $theme['field__field_lugardepublicacion'] =
  $theme['field__field_imprenta'] =
  $theme['field__field_isbn'] =
  $theme['field__field_origen'] =
  $theme['field__field_tamano_alto'] =
  $theme['field__field_tamano_ancho'] =
  $theme['field__field_tamano_profundidad'] =
  $theme['field__field_ubicacion'] =
  $theme['field__field_fotografo'] =
  $theme['field__field_materiales'] =
  $theme['field__field_tipo_de_obra_visual'] =
  $theme['field__field_tipo_de_obra'] =
  $theme['field__field_calidad_de_digitalizacion'] =
  $theme['field__field_autores'] =
  $theme['field__field_derechosobra'] =
  $theme['field__field_duracion'] =  
  $theme['field__field_productora'] =
  $theme['field__field_discografica'] =
  $theme['field__field_matriz'] =
  $theme['field__field_interprete'] =
  $theme['field__field_interprete'] =
  $theme['field__field_tema_audio'] =  
  $theme['field__field_soporte'] =  
    array(
      'render element' => 'content',
      'base hook' => 'field',
      # template file
      'template' => 'field--node--campos_comunes--fichas',
      # location of the template file
     'path' => drupal_get_path('module', 'visualizacion_contenidos') . '/templates',
  );

  $theme['field__field_enlaces_al_contenido'] =
    array(
      'render element' => 'content',
      'base hook' => 'field',
      # template file
      'template' => 'field--node--campos_enlaces_contenidos--fichas',
      # location of the template file
     'path' => drupal_get_path('module', 'visualizacion_contenidos') . '/templates',
  );
  
  $theme['field__field_portada'] =
    array(
      'render element' => 'content',
      'base hook' => 'field',
      # template file
      'template' => 'field--node--portada-embed--libro',
      # location of the template file
     'path' => drupal_get_path('module', 'visualizacion_contenidos') . '/templates',
  );

  return $theme;
}


function componer_fecha($variables, $campo_dia, $campo_mes, $campo_ano) {

    $fechaCompleta = "";

    $dia=$variables['element']['#object']->get($campo_dia)->getValue();
    if (!empty($dia)) {
      $fechaCompleta.=$dia['0']['value']."/"; }

    $mes=$variables['element']['#object']->get($campo_mes)->getValue();
    if (!empty($mes)) {
      $fechaCompleta.=$mes['0']['value']."/"; }

    $ano=$variables['element']['#object']->get($campo_ano)->getValue();
    if (!empty($ano)) {
      $fechaCompleta.=$ano['0']['value']; }

  return $fechaCompleta;
}

function visualizacion_contenidos_preprocess_field(&$variables, $hook) {

// Oculto campos y etiquetas para dia y mes de nacimiento y muerte.
  if (($variables['element']['#field_name'] == 'field_dia_de_muerte') or ($variables['element']['#field_name'] == 'field_mes_de_muerte') or ($variables['element']['#field_name'] == 'field_dia_de_nacimiento') or ($variables['element']['#field_name'] == 'field_mes_de_nacimiento')) {

    $fecha = componer_fecha($variables, 'field_dia_de_nacimiento', 'field_mes_de_nacimiento', 'field_ano_de_nacimiento');

    $variables['label_hidden'] = true;
    $variables['items'] = array ('0' => array ('content' => '', 'attributes' => ''));
  }

  if ($variables['element']['#field_name'] == 'field_ano_de_nacimiento') {

    $variables['label'] = 'Fecha de nacimiento';
    
    $mesnacimiento = $variables['element']['#object']->get('field_mes_de_nacimiento')->getValue();
    
    if (!empty($mesnacimiento)) {
        $fecha = componer_fecha($variables, 'field_dia_de_nacimiento', 'field_mes_de_nacimiento', 'field_ano_de_nacimiento');
        $variables['items'] = array ('0' => array ('content' => $fecha, 'attributes' => ''));
    }
        
  }

  if ($variables['element']['#field_name'] == 'field_ano_de_muerte') {

    $variables['label'] = 'Fecha de muerte';
    
    $mesmuerte = $variables['element']['#object']->get('field_mes_de_muerte')->getValue();
    
    if (!empty($mesmuerte)) {
        $fecha = componer_fecha($variables, 'field_dia_de_muerte', 'field_mes_de_muerte', 'field_ano_de_muerte');
        $variables['items'] = array ('0' => array ('content' => $fecha, 'attributes' => ''));
    }

  }

  if ($variables['element']['#field_name'] == 'field_ano_de_publicacion') {

    $anopublicacionValor = $variables['element']['#object']->get('field_ano_de_publicacion')->getValue();

    if (isset($anopublicacionValor['1']['value'])) {
        $anopublicacion = $anopublicacionValor['0']['value']."-".$anopublicacionValor['1']['value'];
    
        $variables['items'] = array ('0' => array ('content' => $anopublicacion, 'attributes' => ''));
    }
  }

  if ($variables['element']['#field_name'] == 'field_notas') {

    $variables['label'] = 'Notas';
    $notas = $variables['element']['#object']->get('field_notas')->getValue(); 

    $resultados = array ();

    foreach ($notas as $cadaNota)
    {
      $stringSalida = "";
      $valorNota = $cadaNota['value'];

      if (strpos ($valorNota, "{")===0) { // es una nota con llaves {}

        $llaveinicial = strpos ($valorNota, "{");
        $llavefinal = strpos ($valorNota, "}");
        $variable0 = substr ($valorNota, $llaveinicial+1, $llavefinal-$llaveinicial-1);
        $valorNota = substr ($valorNota, $llavefinal+1);

        $llaveinicial = strpos ($valorNota, "{");
        $llavefinal = strpos ($valorNota, "}");
        $variable1 = substr ($valorNota, $llaveinicial+1, $llavefinal-$llaveinicial-1);
        $valorNota = substr ($valorNota, $llavefinal+1);

        $llaveinicial = strpos ($valorNota, "{");
        $llavefinal = strpos ($valorNota, "}");
        $variable2 = substr ($valorNota, $llaveinicial+1, $llavefinal-$llaveinicial-1);
        $valorNota = substr ($valorNota, $llavefinal+1);

        $llaveinicial = strpos ($valorNota, "{");
        $llavefinal = strpos ($valorNota, "}");
        $variable3 = substr ($valorNota, $llaveinicial+1, $llavefinal-$llaveinicial-1);

        switch ($variable0) {
          case "diferencia":

          // proceso la variable 1
          if (strpos ($variable1, "web=")===0) {
            $variable1 = substr ($variable1, 4);
            $variable1 = t('según la página web')." '".$variable1."' :";
          }

          if (strpos ($variable1, "libro=")===0) {
            $variable1 = substr ($variable1, 6);

            $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($variable1);
            if (!empty($term)) { $name = $term->getName(); } else { $name = ""; }

            $variable1 = t('según la fuente bibliográfica')." '".htmlspecialchars($name)."' :";
        }

          // proceso la variable 2
          switch ($variable2) {
            case "1": $variable2 = t('Nombre')." "; break;
            case "2": $variable2 = t('Fecha de nacimiento')." "; break;
            case "3": $variable2 = t('Fecha de muerte')." "; break;
            case "4": $variable2 = t('Lugar de nacimiento')." "; break;
          }

          $stringSalida.= $variable2.$variable1.$variable3;
          break;


          case "estimado":
            // proceso la variable 1
            if (strpos ($variable1, "web=")===0) {
              $variable1 = substr ($variable1, 4);
              $variable1 = t('según la página web')." '".$variable1."' ";
            }

            if (strpos ($variable1, "libro=")===0) {
              $variable1 = substr ($variable1, 6);

              $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($variable1);
                if (!empty($term)) { $name = $term->getName(); } else { $name = ""; }

              $variable1 = t('según la fuente bibliográfica')." '".htmlspecialchars($name)."' ";

          }
          $stringSalida.= $variable1.$variable2." ".$variable3;
          break;

          case "muerte":
            // proceso la variable 1
            if (strpos ($variable1, "web=")===0) {
              $variable1 = substr ($variable1, 4);
              $variable1 = t('según la página web')." '".$variable1."' ";
            }

            if (strpos ($variable1, "libro=")===0) {
              $variable1 = substr ($variable1, 6);

              $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($variable1);
                if (!empty($term)) { $name = $term->getName(); } else { $name = ""; }

              $variable1 = t('según la fuente bibliográfica')." '".htmlspecialchars($name)."' ";

          }
          $stringSalida.= $variable1.$variable2." ".$variable3;
          break;
          case "otro":
            // proceso la variable 1
            if (strpos ($variable1, "web=")===0) {
              $variable1 = substr ($variable1, 4);
              $variable1 = t('según la página web')." '".$variable1."' ";
              $stringSalida.= $variable1.$variable2;
            }
            else {
              if (strpos ($variable1, "libro=")===0) {
                $variable1 = substr ($variable1, 6);

                $term = taxonomy_term_load($variable1);
                if (!empty($term)) { $name = $term->getName(); } else { $name = ""; }

                $variable1 = t('según la fuente bibliográfica')." '".htmlspecialchars($name)."' ";
                $stringSalida.= $variable1.$variable2;
              }
              else {
                $stringSalida.= $variable1;
              }
            }
          break;

        }
       


    }

    else { // No es una nota con llaves
      $stringSalida.= $valorNota;
    }

    array_push ($resultados, array ('content' => $stringSalida, 'attributes' => ''));
        
  }




    $variables['items'] = $resultados;
  }

  if ($variables['element']['#field_name'] == 'field_estatusderechos') {

// Identifico sexo
    $Sexo = $variables['element']['#object']->get('field_sexo')->getValue(); 
    $tidSexo = $Sexo['0']['target_id']; 

    $estatusDerechos = $variables['element']['#object']->get('field_estatusderechos')->getValue(); 
    $tidDerechos = $estatusDerechos['0']['target_id']; // Obtengo el TID del campo derechos.

    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tidDerechos); // Cargo la taxonomia correspondiente
    $tipo = $term->toArray();

    $descripcion = "";
    switch ($tidSexo) {
      case 21:
        $descripcion = $tipo['field_descripcion_h']['0']['value'];
        break;
      case 22:
        $descripcion = $tipo['field_descripcion_m']['0']['value'];
        break;
    }

    $variables['items'] = array ('0' => array ('content' => $descripcion, 'attributes' => ''));

  }
  
  if ($variables['element']['#field_name'] == 'field_derechosobra') {

    $estatusDerechos = $variables['element']['#object']->get('field_derechosobra')->getValue(); 
    $tidDerechos = $estatusDerechos['0']['target_id']; // Obtengo el TID del campo derechos.

    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tidDerechos); // Cargo la taxonomia correspondiente
    $tipo = $term->toArray();

    $descripcion = $tipo['description']['0']['value'];


    $variables['items'] = array ('0' => array ('content' => Array ( '#type' => 'processed_text', '#text' => $descripcion, '#format' => 'basic_html', '#langcode' => 'es' ), 'attributes' => ''));
  }


  if ($variables['element']['#field_name'] == 'field_disciplinaautoral') { // TODO que el resultado sean entidades en vez de solo texto

    $disciplinas = $variables['element']['#object']->get('field_disciplinaautoral')->getValue(); 

    $arregloDisciplinas = array ();

    foreach ($variables['items'] as $cadavariable) {
      $termino_entidad = $cadavariable['content']['#options']['entity'];
      $name = $termino_entidad->getName();
      $id = $termino_entidad->id();

      $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
      $parents = $storage->loadParents($id);
      $allParents =  $storage->loadAllParents($id);

      if (empty($parents)) {
        $arregloDisciplinas[$name] = '';
      } else {
        end ($allParents);
        $nombrePadre = $allParents[key($allParents)]->getName(); // Si tiene padre, lo almaceno en el key del padre.

        if (empty($arregloDisciplinas[$nombrePadre])) {
          $arregloDisciplinas[$nombrePadre]= " (".$name;
        } else
          $arregloDisciplinas[$nombrePadre].= ", ".$name;
        }
      }

    $resultados = array();

    foreach ($arregloDisciplinas as $clave => $valor) {
      if (!empty($valor)) { $valor.=")"; }
      array_push ($resultados, array ('content' => $clave.$valor, 'attributes' => ''));
    }
    
    $variables['items'] = $resultados;

  }

  if ($variables['element']['#field_name'] == 'field_fuentes') {

    $variables['cssId'] = 'uno';
  }

  if ($variables['element']['#field_name'] == 'field_enlaces') {

    $variables['cssId'] = 'dos';
  }

  if ($variables['element']['#field_name'] == 'field_notas') {

    $variables['cssId'] = "tres";
  }

  if ($variables['element']['#field_name'] == 'field_portada') {


    $tipo = $variables['element']['#bundle'];
    $tipo_vista = $variables['element']['#view_mode'];

    if (($tipo == 'libro') && ($tipo_vista == 'full')) {
      $urls = $variables['element']['#object']->get('field_enlaces_al_contenido')->getValue();
      $primeraurl = $urls['0']['uri'];

      $variables['libroEmbed'] = false;

      if (strpos($primeraurl, 'archive.org') !== false) {
        $arrayurl = explode ("/", $primeraurl);
        $idarchive = end($arrayurl);
      }

      if (!empty($idarchive)) {
        $variables['archiveEmbed'] = "https://archive.org/stream/".$idarchive."?ui=embed";

        $variables['libroEmbed'] = true;
      }
    }

    if ($tipo == 'obra_visual') {
      $urls = $variables['element']['#object']->get('field_enlaces_al_contenido')->getValue();
      if (!empty($urls)) {
          $variables['tieneLinkMaxRes'] = true;
          $variables['linkMaxRes'] = $urls['0']['uri']; // Enlaza a la primera URL
      } else { $variables['linkMaxRes'] = false; }

    }

    if ($tipo == 'obra_audiovisual') {
      $urls = $variables['element']['#object']->get('field_enlaces_al_contenido')->getValue();
      $primeraurl = $urls['0']['uri'];
      
      $variables['videoEmbed'] = true;
      $variables['linkVideoEmbed'] = $primeraurl;
  }
  
  }

  if ($variables['element']['#field_name'] == 'field_enlaces_al_contenido') {


    $tipo = $variables['element']['#bundle'];

    if (($tipo == 'libro') || ($tipo == 'obra_audiovisual') || ($tipo == 'obra_de_audio')) {
      $urls = $variables['element']['#object']->get('field_enlaces_al_contenido')->getValue();
      $primeraurl = $urls['0']['uri'];

      $variables['libroEmbed'] = false;

      if (strpos($primeraurl, 'archive.org') !== false) {
        $arrayurl = explode ("/", $primeraurl);
        $idarchive = end($arrayurl);
      }

      if (!empty($idarchive)) {

/* Obtiene los links a los distintos formatos disponibles en internet archive */

        $linkXml = "https://archive.org/download/".$idarchive."/".$idarchive."_files.xml";

        $file = file_get_contents($linkXml, FILE_USE_INCLUDE_PATH);
        $xml = new \SimpleXMLElement($file);
        
        foreach ($xml->file as $cadaFile)
        {
            
            $fileFormat = $cadaFile->format;
            $FileNombre = $cadaFile['name'];
            $urlPublic = file_create_url('public://');

            switch ($fileFormat) {
                case 'Text PDF':
                    $variables['linkPDF'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;
                case 'Standard LuraTech PDF':
                    $variables['linkPDF'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;
                case 'Image Container PDF':
                    $variables['linkPDF'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;
                case 'DjVuTXT':
                    $variables['linkTXT'] = "https://archive.org/stream/".$idarchive."/".$FileNombre;
                break;
                case 'MPEG4':
                    $variables['linkMPEG'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;
                case 'Ogg Video':
                    $variables['linkOGV'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;

                case '24bit Flac':
                    $variables['linkFLAC'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;
                case 'VBR MP3':
                    $variables['linkMP3'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;
                case 'Ogg Vorbis':
                    $variables['linkOGG'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;
                case 'Archive BitTorrent':
                    $variables['linkTorrent'] = "https://archive.org/download/".$idarchive."/".$FileNombre;
                break;
            }
        }

        $variables['libroEmbed'] = true;
      }
    }
  
  }
}



function visualizacion_contenidos_preprocess_node(&$variables) {
  $node = $variables['node'];
  //check content type
  if ($node->getType() == 'autor') {
    $variables['#attached']['library'][] = 'visualizacion_contenidos/contenedor_expandible'; 
    $variables['#attached']['library'][] = 'visualizacion_contenidos/campos';
    $variables['#attached']['library'][] = 'visualizacion_contenidos/ficha-autor';
  }

  if (($node->getType() == 'libro') || ($node->getType() == 'obra_visual') || ($node->getType() == 'obra_audiovisual') || ($node->getType() == 'obra_de_audio')) {
    $variables['#attached']['library'][] = 'visualizacion_contenidos/campos'; 
  }

}

function visualizacion_contenidos_preprocess_page(&$variables) {
  // Add page preprocess functions here.

  $variables['#attached']['library'][] = 'visualizacion_contenidos/estilos_comunes';
  
}


function visualizacion_contenidos_form_alter (&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Modification for the form with the given form ID goes here. For example, if
  // FORM_ID is "user_register_form" this code would run only on the user
  // registration form.

  // Add a checkbox to registration form about agreeing to terms of use.



  if ($form['#id'] == 'views-exposed-form-autores-page-1') {



// dpm($form['obras_cargadas']);

/* comentado provisoriamete hasta solucionar bug - Marco 20/08/2017
  $form['obras_cargadas'] = [
    '#type' => 'checkbox',
    '#default_value' => 'All',
    '#return_value' => '1',
    '#required' => FALSE,
  ];
*/
// dpm($form['obras_cargadas']);

  $form['nacimiento_op']['#options'] = Array
        (
            '<' => t('Antes de'),
            '=' => t('En'),
            '>' => t('Después de'),
        );

  $form['muerte_op']['#options'] = Array
        (
            '<' => t('Antes de'),
            '=' => t('En'),
            '>' => t('Después de'),
        );

  }

}
